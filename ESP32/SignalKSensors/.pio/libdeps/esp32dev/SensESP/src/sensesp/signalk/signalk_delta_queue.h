#ifndef _signalk_delta_queue_H_
#define _signalk_delta_queue_H_

#include <ArduinoJson.h>

#include <list>

#include "sensesp/system/startable.h"

namespace sensesp {

/**
 * @brief Signal K delta queue
 *
 * This class implements a Signal K delta queue. There should be a unique queue
 * for each possible output channel (WSClient, NMEA 2000 messages,
 * carrier pigeons).
 */
class SKDeltaQueue : public Startable {
 public:
  SKDeltaQueue(unsigned int max_buffer_size = 20);
  void append(const String val);
  bool data_available();
  void get_delta(String& output);

  void connect_emitters();

  /// Used to indicate that the next update generated by this
  /// delta should have metadata added to it.
  void reset_meta_send() {
    take_semaphore();
    this->meta_sent_ = false;
    release_semaphore();
  }

  virtual void start() override;

  bool take_semaphore(unsigned long int timeout_ms = 0);
  void release_semaphore();

 private:
  unsigned int max_buffer_size;
  std::list<String> buffer;
  bool meta_sent_;

  unsigned int get_doc_size_estimate();
  unsigned int get_metadata_size_estimate();

  std::size_t get_buffer_size() {
    std::size_t size;
    take_semaphore();
    size = buffer.size();
    release_semaphore();
    return size;
  }

  // Adds Signal K meta data to the specified document
  void add_metadata(JsonArray updates);

  SemaphoreHandle_t semaphore_ = NULL;
};

}  // namespace sensesp

#endif
